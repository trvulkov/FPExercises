Емулация на криптираща машина (Енигма):

Задача 1. Нормализация на входните данни - Енигма, както повечето криптиращи машини от това време, е разполагала с клавиатура със само 26-те главни букви от латинската азбука. Затова, преди да бъдат криптирани, всички съобщения трябвало да бъдат приведени в т. нар. нормален вид: всички числени стойности бивали изписвани словом, всички малки букви ставали главни, а интервалите и пунктуационните знакове били премахвани или заменяни с кодови комбинации от главни букви (напр. интервалът бил заменян с X и т. н.).
Напишете функция normalize message, която нормализира входното съобщение. Правилата за нормализация са следните: 
 - всички малки букви стават главни
 - ако съобщението съдържа цифри, функцията връща грешка
 - всички останали знакове се игнорират
Примери:
normalize "Attack London tomorrow at ten a.m." 	-- -> "ATTACKLONDONTOMORROWATTENAM"
normalize "Attack London tomorrow at 10 a.m." 	-- -> error “digits not allowed”

Задача 2. Цезаров шифър - Цезаровият шифър е един от най-простите и най-стари методи за криптиране на съобщения. Първото му известно използване е от Юлий Цезар по време на кампаниите му в Галия, откъдето идва и неговото име. Идеята на Цезаровия шифър е проста: вземаме съобщението, което искаме да шифроваме, и заместваме всяка от буквите в него с буквата, отместена с определен брой позиции в азбуката.
Например, ако отместването е 3, то тогава ‘A’ -> ‘D’, ‘B’ -> ‘E’, ‘C’ -> ‘F,’ ... , ‘X’ -> ‘A’, ‘Y’ -> ‘B’, ‘Z’ -> ‘C’.
а) Напишете функция encode alphabet ch offset, която приема списък от знакове alphabet, знак ch и отместване offset и връща знака от alphabet, отместен на offset от ch (по модул дължината на списъкa). Функцията encode трябва да работи както с положително, така и с отрицателно отместване и да връща грешка, ако ch не е елемент на alphabet.
N.B. Не е задължително буквите в alphabet да са подредени от ‘A’ до ‘Z’, т.е. НЕ може да разчитате на функциите ord и chr!
Примери:
encode ['A'..'Z'] 'A' 1 	-- -> 'B'
encode ['A'..'Z'] 'C' 2 	-- -> 'E'
encode ['A'..'Z'] 'Z' 3 	-- -> 'C'
encode ['A'..'Z'] 'A' (-1) 	-- -> 'Z'
encode ['A'..'Z'] 'C' (-2) 	-- -> 'A'
encode ['A'..'Z'] 'Z' (-3) 	-- -> 'W'
encode ['A'..'Z'] '@' 1 	-- -> error “unsupported symbol: @”
б) Напишете функция encrypt alphabet offset normalized, която приема азбука alphabet, отместване offset и съобщение в нормализиран вид и връща съобщението, криптирано със съответното отместване.
Пример: encrypt ['A'..'Z'] 5 "ATTACKLONDONTOMORROWATTENAM" -- -> "FYYFHPQTSITSYTRTWWTBFYYJSFR"
в) Напишете функция decrypt alphabet offset encrypted, която приема отместване offset и съобщение, криптирано с това отместване, и връща оригиналното съобщение в нормализиран вид. Можете да използвате факта, че декриптирането на Цезаров шифър с дадено отместване offset е еквивалентно на криптиране с отместване -offset.
Пример: decrypt ['A'..'Z'] 5 "FYYFHPQTSITSYTRTWWTBFYYJSFR" -- -> "ATTACKLONDONTOMORROWATTENAM"

Задача 3. Атака на Цезаровия шифър - Една от основните слабости на Цезаровия шифър се състои в това, че броят на възможните шифри е ограничен до броя на ротациите на буквите в азбуката минус едно. Това прави Цезаровия шифър податлив на т. нар. brute force атака, т.е. атака, която генерира всички възможни дешифровки на кодираното съобщение.
а) Напишете функцията crackAll alphabet encrypted, която връща списък от всички възможни дешифровки на кодираното съобщение encrypted.
б) След като сме генерирали всички възможни дешифровки, бихме могли лесно да намерим най-вероятните от тях, използвайки факта, че някои кратки думи, например the, at, on, се срещат много често в английския език. За тази цел най-напред напишете функция substring sub str, която проверява дали поднизът sub се среща в низа str.
в) Използвайте функциите от предишните две подточки, за да напишете функцията crackCandidates alphabet commonWords encrypted, която приема списък с често срещани думи и криптирано съобщение и връща списък с потенциални вероятни разшифровки. Една разшифровка се смята за вероятна, ако съдържа поне една от думите от списъка с често срещани думи.
Пример: crackCandidates ['A'..'Z'] ["THE","AND","AT","ON","IS"] "FYYFHPQTSITSYTRTWWTBFYYJSFR" -- -> ["ATTACKLONDONTOMORROWATTENAM"]

Задача 4. Polysubstitution cypher (шифър с множествено заместване) - Един от простите начини да се справим със слабостта на Цезаровия шифър е да разбием съобщението на блокове от по няколко знака и да криптираме всеки от тях с различен Цезаров шифър, отместен с определена стъпка спрямо предишния.
а) Напишете функция polyEncrypt alphabet offset step blockSize normalized, която приема азбука alphabet, първоначално отместване offset, стъпка step и размер на блока blockSize, както и съобщение в нормализиран вид normalized, и връща криптирано съобщение, първите blockSize знака на което се криптират с отместване offset, следващите blockSize знака – с отместване offset+step и т.н. 
Пример: polyEncrypt ['A'..'Z'] 5 1 7 "ATTACKLONDONTOMORROWATTENAM" -- -> "FYYFHPQUTJUTZUTVYYVDHBBMVIU"
б) Напишете функция polyDecrypt alphabet offset step blockSize encrypted, която декриптира съобщението от предишната подточка. 
Пример: polyDecrypt ['A'..'Z'] 5 1 7 "FYYFHPQUTJUTZUTVYYVDHBBMVIU" -- -> "ATTACKLONDONTOMORROWATTENAM"

Задача 5. Емулация на Eнигма - Един от основните компоненти на Енигма е система от ротори, всеки от които може да се моделира като polysubstitution cypher от предната задача. Резултатът от всеки от роторите се предава като вход на следващия. Резултатът от последния ротор е криптираното съобщение.
а) Напишете функция enigmaEncrypt alphabet rotors normalized, която приема азбука alphabet, списък от ротори (offset, step, blockSize) и съобщение в нормализиран вид normalized и връща криптираното от роторите съобщение. 
Пример: enigmaEncrypt ['A'..'Z'] [(5,1,1),(7,2,10),(13,3,25)] "ATTACKLONDONTOMORROWATTENAM" -- -> "ZTUCFOQUULZZGCBEIJHQXRSEOFS"
б) Напишете функция enigmaDecrypt alphabet rotors normalized, която приема азбука, списък от ротори и криптирано съобщение и връща оригиналното съобщение. 
Пример: enigmaDecrypt ['A'..'Z'] [(5,1,1),(7,2,10),(13,3,25)] "ZTUCFOQUULZZGCBEIJHQXRSEOFS" -- -> "ATTACKLONDONTOMORROWATTENAM"


Задача 7. Да се дефинира функция transpose :: [[a]] -> [[a]], която получава матрица, представена като списък от списъци и я транспонира.
Задача 8. Да се дефинира функция rotate :: [[a]] -> [[a]], която завърта матрица на прав ъгъл по обратна на часовниковата стрелка посока.
Задача 9. Да се дефинира функция spiral :: [[a]] -> [a], която обхожда матрица по спирала, започвайки от първия елемент на първия ред и движейки се отвън навътре по посока на часовника до изчерпване на членовете (т.е. 1ви ред, последна колона, последен ред наобратно, първа колона наобратно, втори ред, предпоследна колона, ...).

Задача 10. Нека са дефинирани следните типове:
type Student = String                    -- име на ученик
type Subject = String                    -- име на предмет
type Grade   = Double                    -- оценка
type Record  = (Student, Subject, Grade) -- запис за ученик, съдържащ име на ученик, учебен предмет и оценката на ученика по дадения предмет.
Дефинирайте функцията hardestSubject :: [Record] -> Subject, която получава списък от записи за учениците от даден клас и връща името на предмета с най-ниска средна оценка за този клас.

Задача 11. Да се дефинира функция calcLuhnChecksum n, която приема целочислен аргумент n и пресмята неговата чексума на Лун. Алгоритъмът на Лун се състои от следните стъпки:
	1. Конструрира се списък lst от цифрите на даденото цяло число (списък от едноцифрените цели числа, записани чрез поредните цифри в десетичния запис на числото).
	2. Обхождат се елементите на lst и тези на четна позиция се умножават по 2 (индексирането в случая започва от 1).
	3. Събират се цифрите на числата, получени на предходната стъпка.
	4. Получената сума се умножава по 9. Резултатът е последната цифра на полученото число.
Повече информация за алгоритъма на Лун, за неговите свойства и приложения може да се намери тук: https://en.wikipedia.org/wiki/Luhn_algorithm.
Пример: Нека разгледаме числото 7992739871.
	1. Цифри                                             -> 7 9  9 2 7 3 9 8  7 1
	2. Удвояване на едноцифрените числа на четни позиции -> 7 18 9 4 7 6 9 16 7 2
	3. Събиране на цифрите                               -> 7 9  9 4 7 6 9 7  7 2
	4. Сумата на числата в клетките от третия ред е 67. 67 * 9 = 603, следователно търсената чексума е 3.

Задачи от файла "Задачи за подготовка за второто контролно по ФП"