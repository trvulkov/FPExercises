От миналия път:

Асоциативен списък - списък от точкови двойки (<ключ> . <асоциация>)
Задачи:
Задача 9. Функция (assoc key a-list), която търси key в асоциативния списък a-list и връша първия му елемент с ключ равен на key.
Задача 10. Функция (replace lst dict), която връща като резултат списък, получен от lst, в който елементите са заменени с асоциацията им в dict.

Упражнение 7:
Задача 0. Да се реализира функция (insertionSort xs), която реализира сортиране чрез вмъкване върху списък.
Задача 1-8. От файла "Задачи за подготовка за първото контролно по ФП".

Задача 9.
а) Да се реализира функция (sum-digit-divisors n), която намира сумата на тези от положителните цифри на дадено естествено число, които са му делители.
б) Да се реализира функция (same-sum a b), която намира броя на двойките числа (m, n), за които a <= m < n <= b и функцията sum-digit-divisors връща един и същ резултат.
Пример: (same-sum 28 35) -> 2 ; двойките са (28,32) и (29,34)

Задача 10. "Метрика" наричаме функция, която приема като параметър списък от числа и връща число като резултат. Да се напише функция best-metric?, която приема като 
параметри списък от метрики ms и списък от списъци от числа xss и проверява дали има метрика в ms, която дава по-големи стойности от всички други метрики от ms над всеки от елементите на xss.
Пример:
(define (prod xs) (apply * xs))
(define (sum xs) (apply + xs))
(best-metric? (list sum prod) `((0 1 2) (3 -4 5) (1337 0)))  ; -> #t
(best-metric? (list car sum) `((100 -100) (29 1) (42)))      ; -> #f

Задача 11. "Дълбок списък" ще наричаме списък, който може да съдържа други списъци, а "атом" - елемент на дълбок списък, който не е списък (примерно число или символ).
"Ниво на влагане" на атом в дълбок списък наричаме броя пъти, който трябва да се приложи операцията car за достигане до атома.
Да се реализира функция deep-delete, която в даден дълбок списък (в който всеки атом е число) изтрива всички атоми, които са по-малки от нивото им на влагане.
Пример: (deep-delete `(1 (2 (2 4) 1) 0 (3 (1)))) ; -> (1 (2 (4)) (3 ())))