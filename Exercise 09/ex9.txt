Ако още не сте си setup-нали Haskell - https://www.haskell.org/platform/
За Haskell няма някакво специфично IDE, ще ползваме Code Editor с плъгини. Аз лично ще ползвам VS Code, но може да ползвате какъвто и да е редактор с подходящи плъгини. Може да разгледате тук: https://wiki.haskell.org/IDEs
За VS Code ви трябват плъгините Code Runner за да може да run-вате код директно от VS Code и Haskell Syntax Highlighting за да ви оцветява различните елементи от кода.
Отделно има разни по-мощни плъгини като Haskelly, Haskell for Visual Studio Code, които имат повече функционалности. 

Полезни линкове:
Документация: https://www.haskell.org/documentation/
Търсачка на документацията: https://hoogle.haskell.org/ 
Доста полезна е, може да търсите освен по имена и по типове - например Int -> Int ще ви върне всичките едноаргументни функции, които получават и връшат цяло число.
Като отворите страницата за самата функция, в дясно имате бутон # Source, чрез който може да видите и самия код на функцията.

Книга: http://learnyouahaskell.com/


Увод в езика: синтаксис, типове
Задача 1. Да се дефинира функция myMin x y, която получава 2 цели числа и връща минималното от тях
Задача 2. Да се дефинира функция inside a b x, която проверява дали х е в интервала [a, b]
Задача 3. Да се дефинира функция average x y, която намира средно аритметичното на две цели числа
Задача 4. Да се дефинира функция sumSquares a b, която намира сумата на квадратите на числата a и b
Задача 5. Да се дефинира функция fib :: Int -> Integer, която намира n-тото число на Фибоначи

Теория: ламбди, функции от по-висок ред
Задача 6. Да се дефинира функция inside' :: Int -> Int -> (Int -> Bool), която получава само 2 аргумента - двата края на интервал.
inside' a b връща функция на 1 аргумент, която проверява дали той е в интервала [a,b]

Теория: композиция
Задача 7. Да се дефинира функция xSquaredPlusOne :: Int -> Int, която пресмята x^2 + 1, ползвайки композиция на функции
Задача 8. Да се дефинира функция xPlusOneSquared :: Int -> Int, която пресмята (x+1)^2, ползвайки композиция на функции

Теория: частично прилагане, операторни сечения


Хубаво упражнение за да свикнете с езика е да пробвате да пререшите някои от миналите задачи на Haskell. За тях вече имате решения и тестове, просто трябва да ги "преведете" към синтаксиса на Haskell.
Може да отнеме малко време да превключите на Haskell, трябва да внимавате с:
- типовете (вече не работим с динамично типизиран език като Racket) и съответно типовите декларации на функциите
- индентацията
- скоби - вече не се налага да ображдаме всеки израз в скоби
- where блокове с локални дефиниции - къде във функцията (обикновено най-отдолу, за разлика от Racket, където локалните дефиниции бяха над тялото на самата функция), индентацията им
- main блок - вече не може да пишем извиквания директно в кода, след задачата. Имаме отделен main блок, и пишем в него, обикновено print и извикване на съответната функция
